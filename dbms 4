-- Slip 16

-- Tables
CREATE TABLE Student (
    sno INT PRIMARY KEY,
    s_name VARCHAR(50),
    s_class VARCHAR(2) CHECK (s_class IN ('FY','SY','TY'))
);

CREATE TABLE Teacher (
    tno INT PRIMARY KEY,
    t_name VARCHAR(50),
    yrs_experience INT
);

-- Junction table for M-M relationship with descriptive attribute Subject
CREATE TABLE Student_Teacher (
    sno INT REFERENCES Student(sno),
    tno INT REFERENCES Teacher(tno),
    subject VARCHAR(50),
    PRIMARY KEY(sno, tno, subject)
);

-- Sample Data
INSERT INTO Student VALUES
(101,'Rohit','FY'),
(102,'Sita','SY'),
(103,'Amit','TY'),
(104,'Neha','SY');

INSERT INTO Teacher VALUES
(1,'Pawar',15),
(2,'Sharma',8),
(3,'Kale',4);

INSERT INTO Student_Teacher VALUES
(101,1,'Maths'),
(102,1,'Data Structure'),
(103,2,'Maths'),
(104,2,'Data Structure'),
(102,3,'DBMS');

-- Queries B (any 3)
-- i List teachers who have more than 5 years of experience
SELECT t_name FROM Teacher WHERE yrs_experience>5;

-- ii Count all students who have taken subject "Data Structure"
SELECT COUNT(DISTINCT sno) FROM Student_Teacher WHERE subject='Data Structure';

-- iii List the names of all students from SY Class
SELECT s_name FROM Student WHERE s_class='SY';

-- iv Change experience of teacher named "Pawar" to 20
UPDATE Teacher SET yrs_experience=20 WHERE t_name='Pawar';

-- v Display classwise details of students
SELECT s_class, COUNT(*) AS student_count FROM Student GROUP BY s_class;

-- Query C
-- List the names of all teachers with their subjects along with the student names
SELECT t.t_name, st.subject, s.s_name
FROM Teacher t
JOIN Student_Teacher st ON t.tno=st.tno
JOIN Student s ON s.sno=st.sno;

-- OR alternative C (view: teacher teaching maximum number of subjects)
CREATE VIEW Teacher_MaxSubjects AS
SELECT t.t_name, COUNT(DISTINCT st.subject) AS num_subjects
FROM Teacher t
JOIN Student_Teacher st ON t.tno=st.tno
GROUP BY t.t_name
ORDER BY num_subjects DESC
LIMIT 1;
************************************************************************************************************************************

  -- Slip 16

-- Tables
CREATE TABLE Student (
    sno INT PRIMARY KEY,
    s_name VARCHAR(50),
    s_class VARCHAR(2) CHECK (s_class IN ('FY','SY','TY'))
);

CREATE TABLE Teacher (
    tno INT PRIMARY KEY,
    t_name VARCHAR(50),
    yrs_experience INT
);

-- Junction table for M-M relationship with descriptive attribute Subject
CREATE TABLE Student_Teacher (
    sno INT REFERENCES Student(sno),
    tno INT REFERENCES Teacher(tno),
    subject VARCHAR(50),
    PRIMARY KEY(sno, tno, subject)
);

-- Sample Data
INSERT INTO Student VALUES
(101,'Rohit','FY'),
(102,'Sita','SY'),
(103,'Amit','TY'),
(104,'Neha','SY');

INSERT INTO Teacher VALUES
(1,'Pawar',15),
(2,'Sharma',8),
(3,'Kale',4);

INSERT INTO Student_Teacher VALUES
(101,1,'Maths'),
(102,1,'Data Structure'),
(103,2,'Maths'),
(104,2,'Data Structure'),
(102,3,'DBMS');

-- Queries B (any 3)
-- i List teachers who have more than 5 years of experience
SELECT t_name FROM Teacher WHERE yrs_experience>5;

-- ii Count all students who have taken subject "Data Structure"
SELECT COUNT(DISTINCT sno) FROM Student_Teacher WHERE subject='Data Structure';

-- iii List the names of all students from SY Class
SELECT s_name FROM Student WHERE s_class='SY';

-- iv Change experience of teacher named "Pawar" to 20
UPDATE Teacher SET yrs_experience=20 WHERE t_name='Pawar';

-- v Display classwise details of students
SELECT s_class, COUNT(*) AS student_count FROM Student GROUP BY s_class;

-- Query C
-- List the names of all teachers with their subjects along with the student names
SELECT t.t_name, st.subject, s.s_name
FROM Teacher t
JOIN Student_Teacher st ON t.tno=st.tno
JOIN Student s ON s.sno=st.sno;

-- OR alternative C (view: teacher teaching maximum number of subjects)
CREATE VIEW Teacher_MaxSubjects AS
SELECT t.t_name, COUNT(DISTINCT st.subject) AS num_subjects
FROM Teacher t
JOIN Student_Teacher st ON t.tno=st.tno
GROUP BY t.t_name
ORDER BY num_subjects DESC
LIMIT 1;

*********************************************************************************************************************************************

  -- Slip 17

-- Tables
CREATE TABLE Owner (
    oname VARCHAR(50) PRIMARY KEY,
    address VARCHAR(100),
    phone VARCHAR(15)
);

CREATE TABLE Property (
    pno INT PRIMARY KEY,
    area_Sqft NUMERIC(10,2),
    location VARCHAR(50),
    city VARCHAR(50),
    oname VARCHAR(50) REFERENCES Owner(oname)
);

-- Sample Data
INSERT INTO Owner VALUES
('Mr.Rahane','123 Street, Nashik','9876543210'),
('Mr.Baravkar','45 Lane, Pune','9123456780'),
('Ms.Shinde','67 Road, Pune','9988776655');

INSERT INTO Property VALUES
(1,1500,'Deolali','Nashik','Mr.Rahane'),
(2,2500,'Gangapur','Nashik','Mr.Rahane'),
(3,3000,'Kothrud','Pune','Mr.Baravkar'),
(4,8000,'Kothrud','Pune','Ms.Shinde'),
(5,12000,'Kothrud','Pune','Ms.Shinde');

-- Queries B (any 3)
-- i Give the list of all properties in Nashik city
SELECT * FROM Property WHERE city='Nashik';

-- ii Give the names of owners whose property is greater than 2000sq feet
SELECT DISTINCT oname FROM Property WHERE area_Sqft>2000;

-- iii Find the number of properties owned by “Mr.Rahane”
SELECT COUNT(*) FROM Property WHERE oname='Mr.Rahane';

-- iv Count all properties of “Pune” city
SELECT COUNT(*) FROM Property WHERE city='Pune';

-- v Delete all properties in “Pune” city owned by “Mr.Baravkar”
DELETE FROM Property WHERE city='Pune' AND oname='Mr.Baravkar';

-- Query C
-- Find the names of all owners who own a property in Pune city, located in ‘Kothrud’ area and area >10000 sqft
SELECT DISTINCT oname FROM Property
WHERE city='Pune' AND location='Kothrud' AND area_Sqft>10000;

-- OR alternative C (view: owner-wise list of properties)
CREATE VIEW Owner_Properties AS
SELECT o.oname, p.pno, p.area_Sqft, p.location, p.city
FROM Owner o
JOIN Property p ON o.oname=p.oname;
******************************************************************************************************************************

  -- Slip 18

-- Tables
CREATE TABLE Student (
    rno INT PRIMARY KEY,
    name VARCHAR(50),
    city VARCHAR(50)
);

CREATE TABLE Teacher (
    tno INT PRIMARY KEY,
    tname VARCHAR(50),
    phone_no VARCHAR(15),
    salary NUMERIC(10,2)
);

-- Junction table for Many-to-Many relationship with subject
CREATE TABLE Student_Teacher (
    rno INT REFERENCES Student(rno),
    tno INT REFERENCES Teacher(tno),
    subject VARCHAR(50),
    PRIMARY KEY(rno, tno, subject)
);

-- Sample Data
INSERT INTO Student VALUES
(1,'Rahul','Sangamner'),
(2,'Neha','Pune'),
(3,'Anil','Sangamner'),
(4,'Sita','Mumbai');

INSERT INTO Teacher VALUES
(101,'Dr. Wani','9876543210',55000),
(102,'Dr. Mulay','9123456780',60000),
(103,'Prof. Patil','9988776655',45000);

INSERT INTO Student_Teacher VALUES
(1,101,'Maths'),
(2,102,'IKS'),
(3,101,'Physics'),
(3,102,'IKS'),
(4,103,'Electronics');

-- Queries B (any 3)
-- i List the students from “Sangamner” city
SELECT * FROM Student WHERE city='Sangamner';

-- ii Find the maximum salary of teachers
SELECT MAX(salary) FROM Teacher;

-- iii Change the phone number of teacher ‘Dr. Mulay’ to 9834233235
UPDATE Teacher SET phone_no='9834233235' WHERE tname='Dr. Mulay';

-- iv List the details of the teachers in the sorted order of their name
SELECT * FROM Teacher ORDER BY tname;

-- v Count the number of students who have taken subject “IKS”
SELECT COUNT(DISTINCT rno) FROM Student_Teacher WHERE subject='IKS';

-- Query C
-- List the names of all students who are taught by teacher “Dr.Wani”
SELECT s.name
FROM Student s
JOIN Student_Teacher st ON s.rno=st.rno
JOIN Teacher t ON st.tno=t.tno
WHERE t.tname='Dr. Wani';

-- OR alternative C (view: students who have not taken 'Electronics' subject)
CREATE VIEW Students_Not_Electronics AS
SELECT * FROM Student
WHERE rno NOT IN (
    SELECT rno FROM Student_Teacher WHERE subject='Electronics'
);
*******************************************************************************************************************

  -- Slip 19

-- Tables
CREATE TABLE Client (
    cno INT PRIMARY KEY,
    name VARCHAR(50),
    address VARCHAR(50)
);

CREATE TABLE "Order" (
    orderno INT PRIMARY KEY,
    s_order_date DATE,
    amount NUMERIC(10,2) CHECK (amount>0),
    cno INT REFERENCES Client(cno)
);

-- Sample Data
INSERT INTO Client VALUES
(1,'Ravi','Pune'),
(2,'Anita','Mumbai'),
(3,'Suresh','Nagpur'),
(4,'Meena','Delhi');

INSERT INTO "Order" VALUES
(101,'2019-10-05',30000,1),
(102,'2019-10-12',45000,2),
(103,'2019-09-20',25000,3),
(104,'2019-11-01',50000,4),
(105,'2019-10-25',42000,2);

-- Queries B (any 3)
-- i Change order date of client number ’04’ to ‘12/4/19’
UPDATE "Order" SET s_order_date='2019-04-12' WHERE cno=4;

-- ii Display all orders given in the month of October
SELECT * FROM "Order" WHERE EXTRACT(MONTH FROM s_order_date)=10;

-- iii Display all orders in descending order of amount
SELECT * FROM "Order" ORDER BY amount DESC;

-- iv Delete all the clients of Mumbai
DELETE FROM Client WHERE address='Mumbai';

-- v Count the number of orders having amount greater than 40000
SELECT COUNT(*) FROM "Order" WHERE amount>40000;

-- C. Display client name who has placed maximum number of orders
SELECT c.name
FROM Client c
JOIN "Order" o ON c.cno = o.cno
GROUP BY c.name
ORDER BY COUNT(o.orderno) DESC
LIMIT 1;

-- OR

-- Create a view to list names of clients having more than two orders
CREATE OR REPLACE VIEW Clients_MoreThanTwoOrders AS
SELECT c.name
FROM Client c
JOIN "Order" o ON c.cno = o.cno
GROUP BY c.name
HAVING COUNT(o.orderno) > 2;
*****************************************************************************************************************************************************************************************
  -- Slip 20

-- B i. Names of all Customers staying in Delhi
SELECT cust_name FROM Customer WHERE cust_city='Delhi';

-- B ii. Total balance of all Saving accounts
SELECT SUM(balance) FROM Account WHERE acc_type='Saving';

-- B iii. Maximum balance of an account
SELECT MAX(balance) FROM Account;

-- B iv. Increase balance of account no 101123 by 10000
UPDATE Account SET balance = balance + 10000 WHERE acc_no = 101123;

-- B v. Add column "AADHAR number" to Customer table
ALTER TABLE Customer ADD COLUMN aadhar_no VARCHAR(12);

-- C. Names and phone numbers of Customers with Current accounts having balance > 1000000
SELECT c.cust_name, c.phone_no
FROM Customer c
JOIN Account a ON c.cust_no = a.cust_no
WHERE a.acc_type='Current' AND a.balance > 1000000;

-- OR

-- C. Create a view to list details of all customers having Saving account and not staying in Ahilyanagar
CREATE OR REPLACE VIEW Saving_Customers_NotAhilyanagar AS
SELECT c.*
FROM Customer c
JOIN Account a ON c.cust_no = a.cust_no
WHERE a.acc_type='Saving' AND c.cust_city<>'Ahilyanagar';
