-- Slip 11

-- Tables
CREATE TABLE Emp (
    eno INT PRIMARY KEY,
    ename VARCHAR(50),
    salary NUMERIC(10,2)
);

CREATE TABLE Project (
    pno INT PRIMARY KEY,
    pname VARCHAR(50),
    budget NUMERIC(12,2)
);

-- Junction table for Many-to-Many with total_hours
CREATE TABLE Emp_Project (
    eno INT REFERENCES Emp(eno),
    pno INT REFERENCES Project(pno),
    total_hours INT,
    PRIMARY KEY (eno,pno)
);

-- Sample Data
INSERT INTO Emp VALUES
(1,'Anita',50000),
(2,'Ravi',40000),
(3,'Meena',45000);

INSERT INTO Project VALUES
(101,'Alpha',120000),
(102,'Beta',90000),
(103,'Gamma',150000);

INSERT INTO Emp_Project VALUES
(1,101,120),
(2,102,80),
(1,103,150);

-- Queries B (any 3 examples)
-- i Find maximum budget
SELECT MAX(budget) FROM Project;

-- ii Increase salary of all employees by 10%
UPDATE Emp SET salary = salary * 1.10;

-- iii Count projects having duration > 100 hours
SELECT COUNT(DISTINCT pno) 
FROM Emp_Project
WHERE total_hours > 100;

-- iv List all employees whose name ends with 'a'
SELECT * FROM Emp WHERE ename LIKE '%a';

-- v Add column contact_number to employee table
ALTER TABLE Emp ADD COLUMN contact_number VARCHAR(15);

-- Query C
-- Employees not working on any project
SELECT * FROM Emp
WHERE eno NOT IN (SELECT eno FROM Emp_Project);

-- OR alternative C (view: project details having maximum number of hours)
CREATE VIEW Max_Hours_Project AS
SELECT p.pno, p.pname, p.budget, ep.total_hours
FROM Project p
JOIN Emp_Project ep ON p.pno = ep.pno
WHERE ep.total_hours = (SELECT MAX(total_hours) FROM Emp_Project);
*****************************************************************************************************

-- Slip 12

-- Tables
CREATE TABLE Client (
    clientno INT PRIMARY KEY,
    name VARCHAR(50),
    address VARCHAR(100)
);

CREATE TABLE Sales_order (
    sorderno INT PRIMARY KEY,
    s_order_date DATE,
    order_amt NUMERIC(12,2) CHECK (order_amt > 0),
    clientno INT REFERENCES Client(clientno)
);

-- Sample Data
INSERT INTO Client VALUES
(10,'Amit','Nagpur'),
(20,'Ravi','Pune'),
(30,'Meena','Nagpur');

INSERT INTO Sales_order VALUES
(101,'2024-02-20',5000,10),
(102,'2024-02-22',7000,20),
(103,'2024-02-21',12000,30),
(104,'2024-02-19',8000,10),
(105,'2024-02-18',3000,10);

-- Queries B (any 3)
-- i Update client address of all clients from "Nagpur" to "Kolhapur"
UPDATE Client SET address='Kolhapur' WHERE address='Nagpur';

-- ii Delete all sales orders whose client number is 30
DELETE FROM Sales_order WHERE clientno=30;

-- iii Display all sales records having order date before '2024-02-23'
SELECT * FROM Sales_order WHERE s_order_date < '2024-02-23';

-- iv Display sales order having maximum order amount
SELECT * FROM Sales_order
WHERE order_amt = (SELECT MAX(order_amt) FROM Sales_order);

-- v Add column order_status to Sales_order table
ALTER TABLE Sales_order ADD COLUMN order_status VARCHAR(20);

-- Query C
-- Display client details having maximum sales orders
SELECT c.clientno, c.name, c.address
FROM Client c
JOIN Sales_order s ON c.clientno = s.clientno
GROUP BY c.clientno, c.name, c.address
ORDER BY COUNT(s.sorderno) DESC
LIMIT 1;

-- OR alternative C (view: clients having more than 2 sales orders)
CREATE VIEW Clients_MoreThan2Orders AS
SELECT c.clientno, c.name, c.address, COUNT(s.sorderno) AS order_count
FROM Client c
JOIN Sales_order s ON c.clientno = s.clientno
GROUP BY c.clientno, c.name, c.address
HAVING COUNT(s.sorderno) > 2;
************************************************************************************************************************

-- Slip 13

-- Tables
CREATE TABLE Route (
    routeno INT PRIMARY KEY,
    source VARCHAR(50),
    destination VARCHAR(50),
    no_of_stations INT
);

CREATE TABLE Bus (
    busno INT PRIMARY KEY,
    capacity INT NOT NULL,
    depot_name VARCHAR(50),
    routeno INT REFERENCES Route(routeno)
);

-- Sample Data
INSERT INTO Route VALUES
(41,'Pune station','Swargate',12),
(42,'Pimpri','Hadapsar',8),
(43,'Shivaji nagar','Kothrud',2);

INSERT INTO Bus VALUES
(201,50,'Swargate',41),
(202,40,'Pimpri',42),
(203,35,'Hadapsar',42),
(204,30,'Swargate',43);

-- Queries B (any 3)
-- i List all buses at depot "Swargate"
SELECT * FROM Bus WHERE depot_name='Swargate';

-- ii Delete Bus whose Bus number is 204
DELETE FROM Bus WHERE busno=204;

-- iii List all buses on route number 41
SELECT * FROM Bus WHERE routeno=41;

-- iv List the route details having number of stations greater than 10
SELECT * FROM Route WHERE no_of_stations > 10;

-- v List all routes starting from "Pune station"
SELECT * FROM Route WHERE source='Pune station';

-- Query C
-- Delete all buses on routes in which total stations are less than 3
DELETE FROM Bus
WHERE routeno IN (SELECT routeno FROM Route WHERE no_of_stations < 3);

-- OR alternative C (view: buses and route details from Pimpri to Hadapsar)
CREATE VIEW Buses_Pimpri_Hadapsar AS
SELECT b.busno, b.capacity, b.depot_name, r.routeno, r.source, r.destination, r.no_of_stations
FROM Bus b
JOIN Route r ON b.routeno=r.routeno
WHERE r.source='Pimpri' AND r.destination='Hadapsar';
****************************************************************************************************************

-- Slip 14

-- Tables
CREATE TABLE Doctor (
    dcode INT PRIMARY KEY,
    doctor_name VARCHAR(50),
    specialization VARCHAR(50),
    address VARCHAR(50),
    phone_no VARCHAR(15),
    fees NUMERIC(10,2)
);

CREATE TABLE Patient (
    pcode INT PRIMARY KEY,
    patient_name VARCHAR(50),
    symptoms VARCHAR(50),
    dcode INT REFERENCES Doctor(dcode)
);

-- Sample Data
INSERT INTO Doctor VALUES
(1,'Dr. Patil','Orthopedic','Sadashiv Peth','9822001111',500),
(2,'Dr. Kumar','Neurologist','Shivajinagar','9822002222',700),
(3,'Dr. Deshmukh','General','Camp','9822003333',300);

INSERT INTO Patient VALUES
(101,'Maya','Fever',1),
(102,'Manish','Cough',2),
(103,'Rahul','Fever',3),
(104,'Rita','Cold',1);

-- Queries B (any 3)
-- i Find the names of all Patients which start with "M"
SELECT patient_name FROM Patient WHERE patient_name LIKE 'M%';

-- ii Count the number of doctors who are Neurologists
SELECT COUNT(*) FROM Doctor WHERE specialization='Neurologist';

-- iii Give the list of all patients who are suffering from "Fever"
SELECT * FROM Patient WHERE symptoms='Fever';

-- iv Find the specialization and phone numbers of all doctors from 'Sadashiv Peth'
SELECT specialization, phone_no FROM Doctor WHERE address='Sadashiv Peth';

-- v Change the address of Dr. Patil to "Camp"
UPDATE Doctor SET address='Camp' WHERE doctor_name='Dr. Patil';

-- Query C
-- Display the list of all patients who are treated by doctors staying in 'Shivajinagar' area with the specialization "Orthopedic"
SELECT p.patient_name
FROM Patient p
JOIN Doctor d ON p.dcode=d.dcode
WHERE d.address='Shivajinagar' AND d.specialization='Orthopedic';

-- OR alternative C (view: patients treated by doctor with minimum fees)
CREATE VIEW Patients_MinFees AS
SELECT p.patient_name, d.doctor_name, d.fees
FROM Patient p
JOIN Doctor d ON p.dcode=d.dcode
WHERE d.fees = (SELECT MIN(fees) FROM Doctor);
************************************************************************************************************************

-- Slip 15

-- Tables
CREATE TABLE Game (
    gname VARCHAR(50) PRIMARY KEY,
    noofplayers INT,
    coachname VARCHAR(50),
    captain_name VARCHAR(50) CHECK (captain_name = UPPER(captain_name))
);

CREATE TABLE Player (
    pno INT PRIMARY KEY,
    pname VARCHAR(50),
    gname VARCHAR(50) REFERENCES Game(gname)
);

-- Sample Data
INSERT INTO Game VALUES
('Cricket',11,'Dhoni','VIRAT'),
('Hockey',11,'Kumar','RAHUL'),
('Kho Kho',12,'Patil','AMIT');

INSERT INTO Player VALUES
(1,'Rohit','Cricket'),
(2,'Virat','Cricket'),
(3,'Rahul','Hockey'),
(4,'Anil','Hockey'),
(5,'Amit','Kho Kho');

-- Queries B (any 3)
-- i List the names of players playing "hockey"
SELECT pname FROM Player WHERE gname='Hockey';

-- ii Give the average number of players
SELECT AVG(noofplayers) FROM Game;

-- iii Delete the records of players playing 'kho kho'
DELETE FROM Player WHERE gname='Kho Kho';

-- iv List names of players not playing "cricket"
SELECT pname FROM Player WHERE gname <> 'Cricket';

-- v Update the coach name from "Dhoni" to "Tendulkar" for game "Cricket"
UPDATE Game SET coachname='Tendulkar' WHERE gname='Cricket';

-- Query C
-- Display the game details with maximum number of players
SELECT * FROM Game WHERE noofplayers = (SELECT MAX(noofplayers) FROM Game);

-- OR alternative C (view: game-wise list of Players along with their game name)
CREATE VIEW Game_PlayerList AS
SELECT g.gname, p.pname
FROM Game g
JOIN Player p ON g.gname = p.gname;
